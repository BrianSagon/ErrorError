#VEXcode Generated Robot Configuration
from vex import *
import time

# Brain should be defined by default
brain=Brain()
speed = 1
# Robot configuration code
controller1 = Controller(PRIMARY)

# wait for rotation sensor to fully initialize
wait(30, MSEC)

#dictionary assignment, used for determining spin direction in the auto_move() class
    #numbers in here are used to signify if a motor will spin forward or backward, with 1 being forward and -1 being backward
move_direction = {}
move_direction["turn_right"] = {}
move_direction["turn_right"]["left_side"] = 1
move_direction["turn_right"]["right_side"] = -1

move_direction["turn_left"] = {}
move_direction["turn_left"]["left_side"] = -1
move_direction["turn_left"]["right_side"] = 1

move_direction["drive_forward"] = {}
move_direction["drive_forward"]["left_side"] = 1
move_direction["drive_forward"]["right_side"] = 1

move_direction["drive_backward"] = {}
move_direction["drive_backward"]["left_side"] = -1
move_direction["drive_backward"]["right_side"] = -1



#defining functions
class drive_train_class():
        def __init__(self):
            self.back_left=Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)
            self.front_left=Motor(Ports.PORT19, GearSetting.RATIO_18_1, False)
            self.back_right=Motor(Ports.PORT11, GearSetting.RATIO_18_1, True)
            self.front_right=Motor(Ports.PORT14, GearSetting.RATIO_18_1, True)

        def left_motor_vspin(self, velocity):
            self.front_left.spin(FORWARD, velocity, PERCENT)
            self.back_left.spin(FORWARD, velocity, PERCENT)

        def right_motor_vspin(self, velocity):
            self.front_right.spin(FORWARD, velocity, PERCENT)
            self.back_right.spin(FORWARD, velocity, PERCENT)
        
        def left_motor_dspin(self, degrees, velocity):
            self.front_left.set_position(0, DEGREES)
            self.back_left.set_position(0, DEGREES)
            self.front_left.spin_to_position(degrees, DEGREES, velocity, PERCENT, False)
            self.back_left.spin_to_position(degrees, DEGREES, velocity, PERCENT, True)

        def right_motor_dspin(self, degrees, velocity):
            self.front_right.set_position(0, DEGREES)
            self.back_right.set_position(0, DEGREES)
            self.front_right.spin_to_position(degrees, DEGREES, velocity, PERCENT, False)
            self.back_right.spin_to_position(degrees, DEGREES, velocity, PERCENT, True)

        def motors_dspin(self, degrees, velocity):
            self.right_motor_dspin_thread = Thread(self.right_motor_dspin, (degrees, velocity,))
            self.left_motor_dspin(degrees, velocity)

        def motors_brake(self):
            self.front_left.stop(BRAKE)
            self.back_left.stop(BRAKE)
            self.front_right.stop(BRAKE)
            self.back_right.stop(BRAKE)

        def motors_stop(self):
            self.front_left.stop()
            self.back_left.stop()
            self.front_right.stop()
            self.back_right.stop()

        def drive(self):
            global speed
            while True:
                self.speed_change_thread = Thread(self.speed_change)
                drive_train.left_motor_vspin(((controller1.axis3.position()+((controller1.axis1.position() * .7)/(1+abs(controller1.axis3.position()/100)))))*speed)
                drive_train.right_motor_vspin(((controller1.axis3.position()-((controller1.axis1.position() * .7)/(1+abs(controller1.axis3.position()/100)))))*speed)
                if abs(controller1.axis3.position()) < 1 and abs(controller1.axis1.position()) < 1:
                    self.motors_brake()
                wait(5, MSEC)

        def speed_change(self):
            global speed
            if controller1.buttonL2.pressing() == True:
                if speed == 1:
                    speed = .3
                elif speed == .3:
                    speed = 1
                wait(.75, SECONDS)




class auto_move_class():
        def turn(self, degrees, clockdirection):
            if clockdirection == "clockwise":
                turn_direction = "turn_right"
            else:
                turn_direction = "turn_left"
            
            radians = degrees * 0.017453292519
            length_of_arc = 4.5518 * radians          #10 inches is the diameter between wheels of the robot, 5 inches is the radius   #Changed to 4.5518 as it seems to be more accurate, possibly because the back motors are pushing it forward as well.
            turns = length_of_arc/10.9        #10.99 is the circumference of the wheels
            degree = turns * 360

            self.back_right_controller_thread = Thread(self.controller, (drive_train.back_right, degree * move_direction[turn_direction]["right_side"],))
            self.front_left_controller_thread = Thread(self.controller, (drive_train.front_left, degree * move_direction[turn_direction]["left_side"],))
            self.front_right_controller_thread = Thread(self.controller, (drive_train.front_right, degree * move_direction[turn_direction]["right_side"],))
            self.controller(drive_train.back_left, degree * move_direction[turn_direction]["left_side"],)

        def reverse(self, distance):
            Turns = (distance*12)/12.2          #length is multiplied by 12 so that it is defined in inches rather than feet; the 12.566 is also in inches so multiplying it by 12 cancels them into just turns of the wheel
            degree = Turns * -360
            self.back_right_controller_thread = Thread(self.controller, (drive_train.back_right, degree,))
            self.front_left_controller_thread = Thread(self.controller, (drive_train.front_left, degree,))
            self.front_right_controller_thread = Thread(self.controller, (drive_train.front_right, degree,))
            self.controller(drive_train.back_left, degree,)

        def move_to(self, forward, right,):
            turn_direction = "drive_forward"
            
            length = math.sqrt((forward ** 2) + (right ** 2))

            radians = 0
            if forward == 0:                 #I'm not adding a check for if both are zero, as that should never happen
                if right > 0:
                    radians = math.pi/2
                    turn_direction = "turn_right" #All these define the direction that the wheel must turn, which calls upon a dictionary to determine if the right and left wheels should spin forward or backwards
                if right < 0:
                    radians = math.pi/2
                    turn_direction = "turn_left"
            elif right == 0:
                if forward > 0:
                    radians = 0
                    turn_direction = "drive_forward"
                if forward < 0:
                    radians = math.pi
                    turn_direction = "turn_right"          
            else:
                radians = abs((math.atan2(-right, forward))) #THIS IS IMPORTANT: Since i can't seem to remember how this works I'm explaining it here. Arctan by default supplies the 1st and 4th quadrants, however in order to get the full range of motion i need it all in either the 1st and 2nd or the 3rd and 4th (Arctan2!!!). However since I only need the two quadrants, I just use absolute value of Arctan2 to turn all numbers into the 1st and 2nd quadrant, then i use turn_direction to determine where it should spin. A positive Forward shift in this case signifies a positive shift along the x-axis, while a positive right shift signifies a negative shift along the y axis (this is why the formula uses -right, effectively turning right into left)
                if right > 0:
                    turn_direction = "turn_right"
                if right < 0:
                    turn_direction = "turn_left"
            length_of_arc = 4.5518 * radians          #10 inches is the diameter between wheels of the robot, 5 inches is the radius   #Changed to 4.5518 as it seems to be more accurate, possibly because the back motors are pushing it forward as well.
            turns = length_of_arc/10.9        #10.99 is the circumference of the wheels
            degree = turns * 360

            if degree != 0:
                self.back_right_controller_thread = Thread(self.controller, (drive_train.back_right, degree * move_direction[turn_direction]["right_side"],))
                self.front_left_controller_thread = Thread(self.controller, (drive_train.front_left, degree * move_direction[turn_direction]["left_side"],))
                self.front_right_controller_thread = Thread(self.controller, (drive_train.front_right, degree * move_direction[turn_direction]["right_side"],))
                self.controller(drive_train.back_left, degree * move_direction[turn_direction]["left_side"],)

            Turns = (length*12)/12.2          #length is multiplied by 12 so that it is defined in inches rather than feet; the 12.566 is also in inches so multiplying it by 12 cancels them into just turns of the wheel
            degree = Turns * 360
            self.back_right_controller_thread = Thread(self.controller, (drive_train.back_right, degree,))
            self.front_left_controller_thread = Thread(self.controller, (drive_train.front_left, degree,))
            self.front_right_controller_thread = Thread(self.controller, (drive_train.front_right, degree,))
            self.controller(drive_train.back_left, degree,)


        def controller(self, motor, degree):
            brain.screen.set_cursor(6,25)
            brain.screen.print("1 out of 3")
            #For all parts of this, velocity is in degrees/s and acceleration is in degrees/s^2
            motor.set_position(0, DEGREES)
            error = degree - motor.position()
            initial_seconds = (Timer().system())/1000                #Number is defaulted to MSEC, so I divided by 1000 to convert to seconds
            acceleration = 100                                    
            velocity = 0
            initial_error = degree
            if motor == drive_train.front_right or drive_train.back_right:
                acceleration_bonus = 1.00                  #Mess around with changing this number by .01-.04 to fix one side experiencing more friction
            else:
                acceleration_bonus = 1.00
            if abs(error/3.6) > 350: #350 is semi-temporary for max acceleration that I want. 3.6 comes from 360 degrees in one rotation, divided by 100, and seems to give a good slope for how much the acceleration should be at each distance
                if error >= 0:
                    acceleration = 350  * acceleration_bonus
                if error < 0:
                    acceleration = -350  * acceleration_bonus
            elif abs(error/3.6) < 20: 
                if error >= 0:
                    acceleration = 20  * acceleration_bonus
                if error < 0:
                    acceleration = -20  * acceleration_bonus
            else:
                acceleration = (error/3.6)  * acceleration_bonus
            #First third of movement: acceleration
            while (error/initial_error > .55) and (abs(motor.velocity(RPM)) < 197.5):    #197.5 is the lowest max speed of our robot (it's not a constant number :/)
                error = degree - motor.position()
                change_in_time = (Timer().system())/1000 - initial_seconds
                velocity = .5*acceleration*(change_in_time**2)
                if velocity >= 0:
                    direction = FORWARD
                else:
                    direction = REVERSE
                motor.spin(direction, abs(velocity) * (1/6), RPM)  #1/6 is the conversion from degrees/s to rotations/minute

            #Second third of movement: constant speed
            brain.screen.set_cursor(7,25)
            brain.screen.print("2 out of 3")
            required_acceleration = (-(velocity**2))/(2*error)
            while abs(required_acceleration) < abs(acceleration):
                error = degree - motor.position()
                required_acceleration = (-(velocity**2))/(2*error)
                if velocity >= 0:
                    direction = FORWARD
                else:
                    direction = REVERSE
                motor.spin(direction, abs(velocity) * (1/6), RPM)

            #Third third of movement: deceleration
            brain.screen.set_cursor(8,25)
            brain.screen.print("3 out of 3")
            previous_time = Timer().system()
            while abs(error) > 6:                    #6 degrees is the margin of error. If I find that these functions aren't stopping, I probably need a bigger number here
                #the next few lines will repeatedly check to see what acceleration is required to stop the robot efficiently, then make that the new acceleration
                error = degree - motor.position()
                acceleration = (-(velocity**2))/(2*error)             #I'm worried about what would happen with a negative velocity and a positive error here
                change_in_time = Timer().system()-previous_time
                previous_time = Timer().system()
                velocity += (acceleration*(change_in_time/1000))
                if velocity >= 0:
                    direction = FORWARD
                else:
                    direction = REVERSE
                motor.spin(direction, abs(velocity) * (1/6), RPM)
                wait(.1, SECONDS)
            motor.stop(BRAKE)
            brain.screen.set_cursor(9,25)
            brain.screen.print("motors braked")




class puncher_class():
        def __init__(self):
            self.right_puncher=Motor(Ports.PORT4, GearSetting.RATIO_36_1, False)
            self.left_puncher=Motor(Ports.PORT7, GearSetting.RATIO_36_1, True)
            self.puncher_group = MotorGroup(self.right_puncher, self.left_puncher)

        def puncher(self):
            while True:
                if controller1.buttonA.pressing() == True:
                    self.spin_puncher()

        def spin_puncher(self):
            self.puncher_group.set_position(0, DEGREES)
            self.puncher_group.spin_to_position(360, DEGREES, 100, PERCENT, True)

        def AutoPuncher(self):
            for x in range(46):
                self.spin_puncher()
                drive_train.motors_dspin(10, 100)




class wings_class():
        def __init__(self):
            self.left_wing=DigitalOut(brain.three_wire_port.h)
            self.right_wing=DigitalOut(brain.three_wire_port.g)

        def wings(self):
            controller1.buttonUp.pressed(self.enable_wings)
            controller1.buttonDown.pressed(self.disable_wings)
        
        def enable_wings(self):
            self.left_wing.set(True)
            self.right_wing.set(True)

        def disable_wings(self):
            self.left_wing.set(False)
            self.right_wing.set(False)




class game_class():
        def user_control(self):
            brain.screen.clear_screen()
            brain.screen.print("user control code")
            #User control code
            self.drive_thread = Thread(drive_train.drive)
            self.puncher_thread = Thread(puncher.puncher)
            self.wings_thread = Thread(wings.wings)
            
        def autonomous(self):
            brain.screen.clear_screen()
            brain.screen.print("auton code")
            #auton code

        def pre_autonomous(self):
            brain.screen.clear_screen()
            brain.screen.print("pre auton code")




#class defining          
drive_train = drive_train_class()
game = game_class()
auto_move = auto_move_class()
puncher = puncher_class()
wings = wings_class()




#Main
comp = Competition(game.user_control, game.autonomous)
game.pre_autonomous()
